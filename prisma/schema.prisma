// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BusinessAnnouncement {
    id                   Int      @id @default(autoincrement())
    itemId               String   @unique // 공고 고유 ID
    departmentKey        String // 부서 키
    title                String // 공고 제목
    dataContents         String? // 공고 내용
    applicationStartDate String? // 접수 시작일
    applicationEndDate   String? // 접수 종료일
    writerName           String? // 작성자 이름
    writerPosition       String? // 작성자 직위
    writerPhone          String? // 작성자 전화번호
    writerEmail          String? // 작성자 이메일
    viewUrl              String? // 공고 보기 URL
    fileNames            String[] // 첨부파일명 배열 (JSON string으로 저장)
    fileUrls             String[] // 첨부파일 URL 배열 (JSON string으로 저장)
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    regDate              DateTime @db.Date

    @@index([itemId])
    @@index([departmentKey, regDate(sort: Desc)])
    @@index([applicationStartDate])
    @@index([applicationEndDate])
}
